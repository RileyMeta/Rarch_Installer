#!/bin/bash

full_install() {
    _partition_drives
    format_partitions
    _mount_filesystem
    _run_pacstrap
    _run_genfstab
    _set_rootpw
    _install_grub
    if [[ $account_created == true ]]; then
        _create_user
    fi
    _install_packages
    case $AUR_WRAPPER in
        'yay') _install_yay;;
        'paru') _install_paru;;
        'none') : ;;
    esac
    if [[ $SYMLINK = true ]]; then
        _run_symlink
    fi
    _run_systemd
    _set_hostname
    _set_locale
}

_partition_drives() {
    cat <<EOF | fdisk ${DEVICE}
g
n
1

+512MiB
y
t
1
n
2


w
EOF
}

get_format_drive() {
    if [[ $DEVICE == *"nvme"* ]]; then
        FORMAT_DRIVE="${DEVICE}p"
    else
        FORMAT_DRIVE="${DEVICE}"
    fi
}

_format_partitions() {
    get_format_drive
    mkfs.fat -F 32 "${FORMAT_DRIVE}1"
    if [[ $FILE_SYSTEM == "btrfs" ]]; then
        mkfs.$FILE_SYSTEM -f "${FORMAT_DRIVE}2"
    else
        yes | mkfs.$FILE_SYSTEM "${FORMAT_DRIVE}2"
    fi
}

_mount_filesystem() {
    get_format_drive
    mount "${FORMAT_DRIVE}2" /mnt
    mkdir -p /mnt/boot/efi
    mount "${FORMAT_DRIVE}1" /mnt/boot/efi
}

_run_pacstrap() {
    packages="base base-devel linux linux-firmware linux-headers sof-firmware grub efibootmgr git curl wget"
    pacstrap -K /mnt $packages
}

_install_packages() {
    PACSTRAP_PACKAGES="sudo git curl wget efibootmgr efivar grub dosfstools ${TEXT_EDITOR} "
    PACSTRAP_PACKAGES+="xdg-user-dirs xdg-desktop-portal xdg-utils extra/networkmanager "
    case $GRAPHICS_DRIVER in
        'Nvidia Proprietary') PACSTRAP_PACKAGES+="nvidia-dkms egl-wayland lib32-nvidia-utils lib32-opencl-nvidia nvidia-settings opencl-nvidia nvidia-utils ";;
        'Nvidia Open') PACSTRAP_PACKAGES+="nvidia-open-dkms egl-wayland lib32-nvidia-utils lib32-opencl-nvidia nvidia-settings opencl-nvidia nvidia-utils ";;
        'vulkan-nouveau') PACSTRAP_PACKAGES+="vulkan-nouveau mesa ";;
        'xf86-nouveau') PACSTRAP_PACKAGES+="xf86-video-nouveau mesa ";;
        'Intel') PACSTRAP_PACKAGES+="xf86-video-intel mesa ";;
        'AMD GPU') PACSTRAP_PACKAGES+="xf86-video-amdgpu mesa ";;
        'mesa') PACSTRAP_PACKAGES+="mesa ";;
    esac
    case $DESKTOP in
        'Gnome') PACSTRAP_PACKAGES+="gnome gnome-extra xdg-desktop-portal-gtk xdg-desktop-portal-gnome gnome-terminal ${DISPLAY_MANAGER} " ;;
        'Kde Plasma') PACSTRAP_PACKAGES+="plasma plasma-meta xdg-desktop-portal-kde kde-applications kde-utilities ${DISPLAY_MANAGER} " ;;
        'XFCE') PACSTRAP_PACKAGES+="xfce4 xfce4-goodies extra/xfce4-terminal ${DISPLAY_MANAGER} " ;;
    esac 
    if [[ "$AUR_WRAPPER" = "yay" ]]; then
        PACSTRAP_PACKAGES+="go "
    fi
    case $FILE_SYSTEM in
        "ext4") PACSTRAP_PACKAGES+="e2fsprogs " ;;
        "btrfs") PACSTRAP_PACKAGES+="btrfs-progs " ;;
    esac

    arch-chroot /mnt pacman -Sy --noconfirm $PACSTRAP_PACKAGES
}

_run_genfstab() {
    echo "Generating FSTab"
    genfstab -U /mnt >> /mnt/etc/fstab
}

_set_rootpw() {
    echo "Setting Root Password"
    arch-chroot /mnt echo "root:$ROOT_PW_CONFIRM" | chpasswd
}

_install_grub() {
    mkdir -v /mnt/chroot
    cat <<EOF > /mnt/chroot/grub_install
#!/bin/bash

main() {
    mount /boot/efi
    grub-install --efi-directory=/boot/efi --target=x86_64-efi --bootloader-id=GRUB --removable
    grub-mkconfig -o /boot/grub/grub.cfg
}
main
EOF

    chmod a+x /mnt/chroot/grub_install
    arch-chroot /mnt /chroot/grub_install
}

_create_user() {
    echo "Creating User"
    arch-chroot /mnt useradd -m -G wheel,video,audio $USERNAME -s /bin/bash
    echo "Applying User Password"
    arch-chroot /mnt echo '$USERNAME:$user_pass' | chpasswd
    if [[ $SUDOER = true ]]; then
        echo "Adding User to Sudoers"
        arch-chroot /mnt sed -i "/^root.*ALL=(ALL:ALL) ALL/a\\${USERNAME} ALL=(ALL:ALL) ALL" /etc/sudoers
    fi
}

_run_systemd() {
    systemd-nspawn -D /mnt -- systemctl enable $DISPLAY_MANAGER
    systemd-nspawn -D /mnt -- systemctl enable NetworkManager
}

_set_hostname() {
    echo -e "Setting Hostname\n>> echo '${HOSTNAME}' > /etc/hostname"
    echo "${HOST_NAME}" > /mnt/etc/hostname 
}

_set_locale() {
    echo -e "Setting Locale\n>> echo '${SELECTED_LOCALE}' > /etc/locale"
    echo "${SELECTED_LOCALE}" > /mnt/etc/locale
}


_install_yay() {
export USERNAME
    cat << 'EOF' > /mnt/chroot/install_yay.sh
#!/bin/bash
_install_yay() {
    cd /tmp
    git clone https://aur.archlinux.org/yay.git
    chown -R $USERNAME yay/
    cd yay/
    su -c "makepkg" $USERNAME
    pacman -U --noconfirm yay-*.pkg.tar.zst
}
_install_yay
EOF
    chmod +x /mnt/chroot/install_yay.sh
    arch-chroot /mnt /chroot/install_yay.sh
    rm -rf /mnt/chroot/install_yay.sh
}

_install_paru() {
export USERNAME
    cat << 'EOF' > /mnt/chroot/install_paru.sh
#!/bin/bash
install_paru() {
    cd /tmp
    git clone https://aur.archlinux.org/paru.git
    chown -R $USERNAME paru/
    cd paru/
    su -c "makepkg" $USERNAME
    pacman -U --noconfirm paru-*.pkg.tar.zst
}
install_paru
EOF
    chmod +x /mnt/chroot/install_paru.sh
    arch-chroot /mnt /chroot/install_paru.sh
    rm -rf /mnt/chroot/install_paru.sh
}

_run_symlink() {
    echo -e "Symlinking ${TEXT_EDITOR} Text Editor to vi"
    arch-chroot /mnt ln -sf /mnt/usr/bin/$TEXT_EDITOR /mnt/usr/bin/vi
}

clean_up() {
    rm -rf /mnt/chroot
}
