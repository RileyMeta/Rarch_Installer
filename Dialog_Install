#!/bin/bash

# Use the functions from the second script
source ./install_backend

# Script Defaults
BACKTITLE="Rarch Installer"

# Text Modifications
ENDSTYLE="\Zn"
BOLD="\Zb"
BOLD_END="\ZB"
REVERSE="\Zr"
UNDERLINE="\Zu"
RED="\Z1"
GREEN="\Z2"
YELLOW="\Z3"
BLUE="\Z4"
CYAN="\Z6"

TERMINAL_RED="\e[31m"
TERMINAL_END="\e[0m"

# Default Values
DEVICE=""
FILE_SYSTEM=""
HIBERNATE=false
GRAPHICS_DRIVER=""
DESKTOP=""
AUR_WRAPPER="none"
USER_NAME=""
account_created=false
SUDOER=false
ROOT_PW=""
root_pass_set=false
DISPLAY_MANAGER=""
NEW_HOST_NAME=""
SELECTED_LOCALE="en_US"
DEFAULT_LOCALE=true
TEXT_EDITOR=""
SYMLINK=true

#
required=5

# Trap Ctrl+C input and call function
trap 'aborted' INT

aborted() {
    clear
    prompt="${TERMINAL_RED}Rarch Installer has been Aborted.${TERMINAL_END}"
    prompt+="\nIf this was caused be a bug or other issues, please report it to the Github"
    prompt+="\n\nhttps://github.com/RileyMeta/Rarch_Installer/issues/new"
    prompt+="\n"
    echo -e "$prompt"
    exit 0
}

# Possible failures for init_test
_ram_fail() {
    clear
    prompt="Unfortunately your memory doesn't meet the minimum requirements of 2GiB"
    prompt+="\nIf you would like to continue with installation anyways:"
    prompt+="\nplease pass the '--force' flag to ignore this error"
    echo -e "$prompt" 
}

_ping_fail() {
    clear
    prompt="Unfortunately we could not establish a connection to the Internet."
    prompt+="\nArch Linux uses online repositories to download packages,"
    prompt+="\nWithout an internet connection the install cannot continue."
    prompt+="\n\nIf you are using WiFi try the following:"
    prompt+="\n'iwctl station wlan0 connect NETWORK-SSID'"
    echo -e "$prompt"
}

# Init Test
# Make sure system has enough RAM
# Make sure system has Internet Access (For installing Packages)
# Install Dependencies for script if necessary
init_test() {
    local force=$1

    # If `--force` flag is set, spoof the ram amount to bypass `_ram_fail`
    if [[ "$force" == "true" ]]; then
        total_ram=2048
    else
        total_ram=$(free -m | awk '/^Mem:/{print $2}')
    fi

    if [ "$total_ram" -lt 2048 ]; then
        _ram_fail
    else
        ping -c 1 google.com || _ping_fail
    fi

    # Check for and install dialog
    if command -v dialog > /dev/null 2>&1; then 
        :
    else
        pacman -Sy --noconfirm dialog
    fi

    main_menu
}

# All menu labels
_menu_checks() {
    prompt=""
    case $prompt_argument in
        1) prompt+="${BOLD}Welcome to Riley's Arch Installer${ENDSTYLE}"
           prompt+="\nUse the steps below to configure your system the way you want.";;
        2) prompt+="${BOLD}Please review all your info below.${ENDSTYLE}"
           prompt+="\nIf there are any changes you would like to make, simply type the label name"
           prompt+="\nand you will be taken to that section so you can make changes.";;
        3) prompt+="${YELLOW}System Install Aborted at last minute."
           prompt+="\n${BOLD}Nothing has been changed.${ENDSTYLE}";;
        4) prompt+="${RED}${BOLD}Unable to continue${ENDSTYLE}"
           prompt+="\nPlease complete all ${RED}required${ENDSTYLE} items.";;
        5) prompt+="Installation Cancelled"
           prompt+="\nNo changes have been made.";; 
        6) prompt+="Successful Install"
           prompt+="\nYou can now reboot into the new system.";;
    esac
    
    LOCALE_LABEL="Locale: ${GREEN}${SELECTED_LOCALE}${ENDSTYLE}"
    if [[ $DEFAULT_LOCALE = true ]]; then
        LOCALE_LABEL+=" *default"
    fi
    
    HOSTNAME_LABEL="Hostname: "
    if [[ ${NEW_HOST_NAME} != "" ]]; then
        HOSTNAME_LABEL+="${GREEN}${NEW_HOST_NAME}${ENDSTYLE}" 
    else
        HOSTNAME_LABEL+="${RED}not set${ENDSTYLE}"
    fi

    DISKS_LABEL="Disk Selection: "
    if [[ $DEVICE != "" ]]; then
        DISKS_LABEL+="${GREEN}${DEVICE}${ENDSTYLE}"
    else
        DISKS_LABEL+="${RED}not set${ENDSTYLE}" 
    fi
    
    FS_LABEL="File System: "
    if [[ $FILE_SYSTEM != '' ]]; then
        FS_LABEL+="${GREEN}${FILE_SYSTEM}${ENDSTYLE}" 
    else
        FS_LABEL+="${RED}not set${ENDSTYLE}"
    fi
    
    ROOT_PASS_LABEL="Root Password: "
    if [[ $root_pass_set = true ]]; then
        ROOT_PASS_LABEL+="${GREEN}set${ENDSTYLE}" 
    else
        ROOT_PASS_LABEL+="${RED}not set${ENDSTYLE}"
    fi

    USER_ACCOUNT_LABEL="User Account: "
    if [[ $account_created = true ]]; then
        if [[ $SUDOER = true ]]; then
            USER_ACCOUNT_LABEL+="${GREEN}${NEW_USERNAME}${ENDSTYLE}*"
        else
            USER_ACCOUNT_LABEL+="${GREEN}${NEW_USERNAME}${ENDSTYLE}"
        fi
    else
        USER_ACCOUNT_LABEL+="${CYAN}No User Account${ENDSTYLE}"
    fi

    TEXT_EDITOR_LABEL="Text Editor: "
    if [[ $TEXT_EDITOR != '' ]]; then
        if [[ $SYMLINK = true ]]; then
            TEXT_EDITOR_LABEL+="${GREEN}${TEXT_EDITOR}${ENDSTYLE}*"
        else
            TEXT_EDITOR_LABEL+="${GREEN}${TEXT_EDITOR}${ENDSTYLE}"
        fi
    elif [[ $TEXT_EDITOR = 'none' ]]; then
        TEXT_EDITOR_LABEL+="${GREEN}None${ENDSTYLE}"
    else
        TEXT_EDITOR_LABEL+="${RED}not set${ENDSTYLE}"
    fi

    DESKTOP_LABEL="Desktop: "
    if [[ $DESKTOP == "" ]]; then
        DESKTOP_LABEL+="${GREEN}None${ENDSTYLE} *default"
    else
        DESKTOP_LABEL+="${GREEN}${DESKTOP}${ENDSTYLE}"
    fi

    GPU_DRIVER_LABEL="Graphics Driver: ${GREEN}"
    case $GRAPHICS_DRIVER in # TODO: FIX THIS
        "Default") GPU_DRIVER_LABEL+="None ${ENDSTYLE}*default";;
        "Nvidia Proprietary") GPU_DRIVER_LABEL+="Nvidia Proprietary";;
        "Nvidia OpenKernel") GPU_DRIVER_LABEL+="Nvidia OpenKernel";;
        "Nvidia OpenSource (new)") GPU_DRIVER_LABEL+="Nvidia OpenSource";;
        "Nvidia OpenSource") GPU_DRIVER_LABEL+="Nvidia OpenSource";;
        "Intel") GPU_DRIVER_LABEL+="Intel";;
        "AMD GPU") GPU_DRIVER_LABEL+="AMD";;
        "Mesa") GPU_DRIVER_LABEL+="Mesa ${ENDSTYLE}*backend only";;
        "None") GPU_DRIVER_LABEL+="No Drivers";;
    esac
    GPU_DRIVER_LABEL+="${ENDSTYLE}"
    
    AUR_LABEL="AUR Helper: "
    if [[ $AUR_WRAPPER != "none" ]]; then
        AUR_LABEL+="${GREEN}${AUR_WRAPPER}${ENDSTYLE}"
    else
        AUR_LABEL+="${CYAN}None Chosen${ENDSTYLE}"
    fi
    
    if [[ $ERROR != 1 ]]; then
        MAIN_TITLE="Main Menu"
    else
        MAIN_TITLE="An Error has occurred"
    fi

    if [[ -z "$HOSTNAME" && -z "$DEVICE" && -z "$FILE_SYSTEM" && "$root_pass_set" == "false" && -z "$TEXT_EDITOR" ]]; then
        INSTALL_LABEL="${REVERSE}${RED}Install${ENDSTYLE}"
    else
        INSTALL_LABEL="${REVERSE}${GREEN}Install${ENDSTYLE}"
    fi
}

main_menu() {
    local title, text
    _menu_checks
    while true; do
    mainMenuOptions=(
    1 "${LOCALE_LABEL}"
    2 "${HOSTNAME_LABEL}"
    3 "${DISKS_LABEL}"
    4 "${FS_LABEL}"
    5 "${ROOT_PASS_LABEL}"
    6 "${USER_ACCOUNT_LABEL}"
    7 "${TEXT_EDITOR_LABEL}"
    8 "${DESKTOP_LABEL}"
    9 "${GPU_DRIVER_LABEL}"
    10 "${AUR_LABEL}"
    11 "${INSTALL_LABEL}"
)
result=$(dialog --clear --title "${MAIN_TITLE}" \
    --backtitle "$BACKTITLE" \
    --colors \
    --default-item "$default_item" \
    --extra-button --extra-label "More Info" \
    --cancel-label "Exit" \
    --stdout \
    --menu "${prompt}" 0 0 10 "${mainMenuOptions[@]}")

case $? in
    0)  case $result in
            1) locale_selection
                break ;;
            2) hostname
                break ;;
            3) disk_selection
                break ;;
            4) filesystem
                break ;;
            5) root_password
                break ;;
            6) account_creation
                break ;;
            7) texteditor
                break ;;
            8) choose_desktop
                break ;;
            9) graphics_drivers
                break ;;
            10) aur_wrapper
                break ;;
            11) _install_check
                break ;;
        esac
        ;;
    3) 
        case $result in
            1) title="Locale Selection"
                text="The Locale is the language that the system will use to build packages and their documentation.";;
            2) title="Hostname"
                text="The name your computer will show up as on the network.";;
            3) title="Disk Selection"
                text="Select the Hard Drive or SSD that you want to install Arch Linux to.";;
            4) title="Filesystem"
                text="This is the filesystem that the Root of your system will use.";;
            5) title="Root Password"
                text="Assign a password to the root user account.";;
            6) title="Account Creation"
                text="It's best practice to only use the root user for specific tasks, not every day use, so here you have the option to create a user account.";;
            7) title="Text Editor"
                text="This is a terminal text editor, needed to edit configuration files easily, not strictly required, but definitely recommended.";;
            8) title="Desktop"
                text="If you want, a Desktop Environment brings all the tools and a graphic user interface, making it easier and more like a \"Desktop\" to use.";;
            9) title="Graphics Drivers"
                text="If you're using specific graphics hardware a driver may be required for it to function.";;
            10) title="AUR Wrapper"
                text="This is a simple tool that helps to automate installing packages from the AUR. Right now we offer Yay (written in Go) and Paru (written in Rust).";;
            11) title="THE ALL MIGHTY INSTALL BUTTON"
                text="Don't touch unless you're ready. (Don't worry, it's coded not to install until you say so)";;
        esac
        dialog --clear --backtitle "$BACKTITLE" --title "$title" --msgbox "$text" 6 40;;
    1) clear 
        exit 1 ;;
esac
    done
}

#
# Sub-menus to obtain the information for the install
#
locale_selection() {
    options=("af_ZA" "ar_SA" "be_BY" "bg_BG" "bs_BA" "ca_ES" "cs_CZ" \
             "da_DK" "de_DE" "el_GR" "en_GU" "en_US" "es_ES" "et_EE" \
             "eu_ES" "fa_IR" "fi_FI" "fil_P" "fr_BE" "fr_CA" "fr_CH" \
             "fr_FR" "ga_IE" "gl_ES" "he_IL" "hi_IN" "hr_HR" "hu_HU" \
             "id_ID" "is_IS" "it_IT" "ja_JP" "ka_GE" "km_KH" "kn_IN" \
             "ko_KR" "lo_LA" "lt_LT" "mi_NZ" "mi_NZ" "mi_NZ" "mi_NZ" \
             "ml_IN" "mn_MN" "ms_MY" "nl_NL" "nn_NO" "no_NO" "no_NO" \
             "pl_PL" "pt_BR" "pt_PT" "pt_TL" "ro_RO" "ru_RU" "sk_SK" \
             "sl_SI" "so_SO" "sq_AL" "sr_CS" "sv_SE" "ta_IN" "th_TH" \
             "tr_TR" "uk_UA" "vi_VN" "zh_CN" "zh_TW")

    menu_options=()
    i=1
    for option in "${options[@]}"; do
        menu_options+=("$i" "$option")
        ((i++))
    done

    exec 3>&1
    if [ $DEFAULT_LOCALE = true ]; then
        locale_message="Default: ${CYAN}${SELECTED_LOCALE}${ENDSTYLE}"
    else
        locale_message="Current Selection: ${CYAN}${SELECTED_LOCALE}${ENDSTYLE}"
    fi
    locale_message+="\nPlease select your Locale"
    locale_message+="\n\nor press 'Skip' to confirm the default"
    if [ $DEFAULT_LOCALE = true ]; then
        LOCALE_CANCEL_LABEL="SKIP"
    else
        LOCALE_CANCEL_LABEL="BACK"
    fi
    selection=$(dialog --clear \
                       --title "Locale Selection" \
                       --colors \
                       --ok-label "SELECT" \
                       --cancel-label "${LOCALE_CANCEL_LABEL}" \
                       --menu "${locale_message}" 15 40 10 \
                       "${menu_options[@]}" \
                       2>&1 1>&3)
    exec 3>&-

    if [ -n "$selection" ]; then
        chosen_option="${options[$((selection - 1))]}"
        SELECTED_LOCALE="${chosen_option}.UTF-8"
        default_item=2
        main_menu
    else
        default_item=2
        main_menu
    fi
}

hostname() {
    local NEW_HOST_NAME
    NEW_HOST_NAME=$(dialog --clear \
    --backtitle "${BACKTITLE}" \
    --colors \
    --title "Hostname" \
    --inputbox "Please set the Hostname for your computer:" 8 40 \
    --output-fd 1)

    if [ $? -eq 0 ]; then
        default_item=3
        main_menu
    else
        main_menu
    fi
}

disk_selection() {
    DISK_SELECT_PROMPT="Below are your Available Storage Devices:\n"
    output=$(lsblk -Ald -o NAME,SIZE,RM)

    while IFS= read -r line; do
        name=$(echo "$line" | awk '{print $1}')
        size=$(echo "$line" | awk '{print $2}')
        rm=$(echo "$line" | awk '{print $3}')

        if [[ "$name" != *"SWAP"* && "$name" != *"zram0"* && "$name" != *"NAME"* ]]; then
            if [[ "$rm" -eq 1 ]]; then
                DISK_SELECT_PROMPT+="\n$name ${BLUE}${size}${ENDSTYLE} ${REVERSE}${YELLOW}[Removable]${ENDSTYLE}"
            else
                DISK_SELECT_PROMPT+="\n$name ${BLUE}${size}${ENDSTYLE}"
            fi
        fi
    done <<< "$output"
    DISK_SELECT_PROMPT+="\n\nPlease Select the Disk you would like to install Linux to"
    mapfile -t options < <(lsblk -Ald -o NAME | tail -n +2)

    menu_options=""
    i=1
    for option in "${options[@]}"; do
        if [[ "$option" != "zram0" && "$option" != "NAME" && "$option" != *SWAP* ]]; then
            menu_options+="$i $option "
            ((i++))
        fi
    done

    exec 3>&1
    selection=$(dialog --clear \
                       --backtitle "${BACKTITLE}" \
                       --colors \
                       --title "Disk Selection" \
                       --cancel-label "BACK" \
                       --ok-label "SELECT" \
                       --menu "${DISK_SELECT_PROMPT}" 0 0 0 \
                       $menu_options \
                       2>&1 1>&3)
    exec 3>&-

    if [ -n "$selection" ]; then
        chosen_option=$(echo "$menu_options" | awk -v sel="$selection" '{for(i=1; i<=NF; i+=2) if($i == sel) print $(i+1)}')
        DEVICE="/dev/${chosen_option}"
        _drive_confirmation
    else
        main_menu
    fi
}

_drive_confirmation() {
    if dialog --clear \
    --backtitle "${BACKTITLE}" \
    --colors \
    --title "Disk Confirmation" \
    --yesno "Are you sure you would like to use ${CYAN}${DEVICE}${ENDSTYLE}?" 0 0 ; then
        _hibernate_confirm
    else
        DEVICE=""
        disk_selection
    fi
}

_hibernate_confirm() {
    if dialog --clear \
    --backtitle "${BACKTITLE}" \
    --colors \
    --title "Hibernation Confirmation" \
    --yesno "Are you using a laptop that you plan to use the \"Hibernation\" feature with?" 0 0 ; then
        HIBERNATE=true
        default_item=4
        main_menu
    else
        HIBERNATE=false
        default_item=4
        main_menu
    fi
}

filesystem() {
    while true; do
    filesystemOptions=(
    1 "EXT4"
    2 "BTRFS"
)
result=$(dialog --clear --title "Filesystem Selection" \
    --backtitle "$BACKTITLE" \
    --colors \
    --cancel-label "Exit" \
    --stdout \
    --menu "\nPlease select your preferred file system" 0 0 3 "${filesystemOptions[@]}")

case $? in
    0)  case $result in
            1) FILE_SYSTEM="ext4"
                default_item=5
                main_menu
                break ;;
            2) FILE_SYSTEM="btrfs"
                default_item=5
                main_menu
                break ;;
        esac
        ;;
    1) main_menu;;
esac
    done
}

root_password() {
    case ${ROOT_INCORRECT} in
        *) ROOT_PW_TITLE="Root Password"
            ROOT_PW_MSG="Please input your root Password";;
        2) ROOT_PW_TITLE="Please Try Again"
            ROOT_PW_MSG="The passwords you entered did not match. \nPlease try again.";;
        3) ROOT_PW_TITLE="Please Try Again"
            ROOT_PW_MSG="The Root Password cannot be blank. \nPlease try again.";;
    esac

    ROOT_PW=$(dialog --clear \
    --backtitle "${BACKTITLE}" \
    --title "${ROOT_PW_TITLE}" \
    --insecure \
    --passwordbox "${ROOT_PW_MSG}" 0 0 \
    --output-fd 1)

    if [ $? -eq 1 ]; then
        main_menu
    else
        if [[ $ROOT_PW != "" ]]; then 
            _confirm_root_pw
        else
            ROOT_INCORRECT=3
            root_password
        fi
    fi
}

_confirm_root_pw() {
    ROOT_PW_CONFIRM=$(dialog --clear \
    --backtitle "${BACKTITLE}" \
    --title "Root Password" \
    --insecure \
    --passwordbox "Please confirm your root Password" 0 0 \
    --output-fd 1)

    if [ $? -eq 1 ]; then
        main_menu
    else
        if [[ $ROOT_PW_CONFIRM = "$ROOT_PW" ]]; then
            root_pass_set=true
            default_item=6
            main_menu
        else
            ROOT_INCORRECT=2
            root_password
        fi
    fi
}

account_creation() {
    if [[ $USERNAME_INCORRECT = true ]]; then
        USERNAME_PROMPT="A username cannot be blank. \nPlease try again."
    else
        USERNAME_PROMPT="Please type your username:"
    fi
    NEW_USERNAME=$(dialog --clear \
    --backtitle "${BACKTITLE}" \
    --title "User Account Creation" \
    --insecure \
    --inputbox "${USERNAME_PROMPT}" 0 0 \
    --output-fd 1)

    if [ $? -eq 1 ]; then
        main_menu
    else
        if [[ -z $USER_NAME ]]; then 
            USER_INCORRECT=1 # Default / Normal response
            USER_NAME="${NEW_USERNAME,,}"
            user_password_check
        else
            USERNAME_INCORRECT=true
            account_creation
        fi
    fi
}

user_password_check() {
    if dialog --clear \
    --backtitle "${BACKTITLE}" \
    --colors \
    --title "User Account Password" \
    --yesno "Would you like ${BLUE}${NEW_USERNAME}${ENDSTYLE} to have a password?" 0 0; 
    then
        user_password
        user_pass=true
    else
        user_pass=false
        account_created=true
        default_item=7
        main_menu
    fi
}

user_password() {
    case ${USER_INCORRECT} in
        "1") USER_PW_MSG="Please input your user Password";;
        "2") USER_PW_MSG="The passwords you entered did not match. \nPlease try again.";;
        "3") USER_PW_MSG="The User Password cannot be blank. \nPlease try again.";;
    esac
    USER_PW=$(dialog --clear \
    --backtitle "${BACKTITLE}" \
    --title "User Password" \
    --insecure \
    --passwordbox "${USER_PW_MSG}" 0 0 \
    --output-fd 1)

    if [ $? -eq 1 ]; then
        main_menu
    else
        if [[ $USER_PW != "" ]]; then 
            _confirm_user_pw
        else
            USER_INCORRECT=3
            user_password
        fi
    fi
}

_confirm_user_pw() {
    USER_PW_CONFIRM=$(dialog --clear \
    --backtitle "${BACKTITLE}" \
    --title "User Password" \
    --insecure \
    --passwordbox "Please confirm your user Password" 0 0 \
    --output-fd 1)

    if [ $? -eq 1 ]; then
        main_menu
    else
        if [[ $USER_PW_CONFIRM = "$USER_PW" ]]; then
            user_pass_set=true
            account_created=true
            user_sudoers_check
        else
            USER_INCORRECT=2
            user_password
        fi
    fi
}

user_sudoers_check() {
    if dialog --clear \
    --backtitle "${BACKTITLE}" \
    --colors \
    --title "Sudoers" \
    --yesno "Would you like ${BLUE}${NEW_USERNAME}${ENDSTYLE} to be a sudoer?" 0 0; 
    then
        SUDOER=true
        default_item=7
        main_menu
    else
        SUDOER=false
        default_item=7
        main_menu
    fi
}

texteditor() { # TODO: FIX
    while true; do
        texteditorOptions=(
            1 "Vi" on \
            2 "Vim" off \
            3 "NeoVim" off \
            4 "Nano" off \
            5 "Emacs" off \
            6 "None" off
        )

    result=$(dialog --clear --title "Text Editor Selection" \
        --backtitle "$BACKTITLE" \
        --colors \
        --cancel-label "BACK" \
        --stdout \
        --checklist "\nPlease select your preferred console text editor" 0 0 6 "${texteditorOptions[@]}")

case $? in
    0)  case $result in
            1) TEXT_EDITOR="vi"
                default_item=8
                main_menu
                break ;;
            2) TEXT_EDITOR="vim"
                default_item=8
                main_menu
                break ;;
            3) TEXT_EDITOR="neovim"
                default_item=8
                text_editor_symlink
                break ;;
            4) TEXT_EDITOR="nano"
                default_item=8
                text_editor_symlink
                break ;;
            5) TEXT_EDITOR="emacs"
                default_item=8
                text_editor_symlink
                break ;;
            6) TEXT_EDITOR="none"
                default_item=8
                main_menu
                break ;;
        esac ;;
    1) main_manu;;
esac
    done
}

text_editor_symlink() {
    if dialog --clear \
    --backtitle "${BACKTITLE}" \
    --colors \
    --title "User Account Password" \
    --yesno "Would you like to symlink ${BLUE}${TEXT_EDITOR}${ENDSTYLE} to /usr/bin/vi? \
    \n\nThis would allow you to work with apps that require vi (like Visudo)." 0 0;
    then
        SYMLINK=true
        main_menu
    else
        main_menu
    fi
}

choose_desktop() {
    while true; do
    desktopOptions=(
    1 "Gnome"
    2 "KDE Plasma"
    3 "XFCE"
    4 "None (TTY Only)"
)
result=$(dialog --clear --title "Desktop Environment" \
    --backtitle "$BACKTITLE" \
    --colors \
    --cancel-label "BACK" \
    --stdout \
    --menu "\nPlease select your preferred Desktop Environment" 0 0 3 "${desktopOptions[@]}")

case $? in
    0)  case $result in
            1) DESKTOP="Gnome"
                display_manager
                break ;;
            2) DESKTOP="Kde Plasma"
                display_manager
                break ;;
            3) DESKTOP="XFCE"
                display_manager
                break ;;
            4) DESKTOP="None (TTY Only)"
                display_manager
                break ;;
        esac
        ;;
    1) main_manu;;
esac
    done
}

display_manager() {
    if [[ $DESKTOP = 'Gnome' ]]; then
        GDM_PROMPT="GDM (*Recommended for Gnome)"
    else
        GDM_PROMPT="GDM"
    fi

    while true; do
    displaymanagerOptions=(
    1 "${GDM_PROMPT}"
    2 "SDDM"
    3 "LightDM"
    4 "SX (StartX alternative)"
    5 "None"
)
result=$(dialog --clear --title "Display Manager Selection" \
    --backtitle "$BACKTITLE" \
    --colors \
    --cancel-label "Exit" \
    --stdout \
    --menu "\nPlease select your preferred Display Manager" 0 0 3 "${displaymanagerOptions[@]}")

case $? in
    0)  case $result in
            1) DISPLAY_MANAGER="gdm"
                default_item=9
                main_menu
                break ;;
            2) DISPLAY_MANAGER="sddm"
                default_item=9
                main_menu
                break ;;
            3) DISPLAY_MANAGER="lightdm"
                default_item=9
                main_menu
                break ;;
            4) DISPLAY_MANAGER="sx"
                default_item=9
                main_menu
                break ;;
            5) DISPLAY_MANAGER=""
                default_item=9
                main_menu
                break ;;
        esac
        ;;
    1) main_menu;;
esac
    done
}

graphics_drivers() {
    while true; do
    graphicsdriverOptions=(
    1 "Nvidia (Proprietary)"
    2 "Nvidia (OpenKernel)"
    3 "Nvidia (vulkan-nouveau)"
    4 "Nvidia (xf86-video-nouveau)"
    5 "Intel (xf86-video-intel)"
    6 "AMD (xf86-video-amdgpu)"
    7 "Mesa (openGL drivers)"
    8 "None"
)
result=$(dialog --clear --title "Graphics Driver Selection" \
    --backtitle "$BACKTITLE" \
    --colors \
    --cancel-label "Exit" \
    --extra-button \
    --extra-label "More Info" \
    --stdout \
    --menu "\nPlease select your preferred graphics driver
    \n\nor check 'More Info' to see what all will be installed." 0 0 6 "${graphicsdriverOptions[@]}")

case $? in
    0)  case $result in
            1) GRAPHICS_DRIVER="Nvidia Proprietary"
                default_item=10
                main_menu
                break ;;
            2) GRAPHICS_DRIVER="Nvidia Open"
                default_item=10
                main_menu
                break ;;
            3) GRAPHICS_DRIVER="vulkan-nouveau"
                default_item=10
                main_menu
                break ;;
            4) GRAPHICS_DRIVER="xf86-nouveau"
                default_item=10
                main_menu
                break ;;
            5) GRAPHICS_DRIVER="Intel"
                default_item=10
                main_menu
                break ;;
            6) GRAPHICS_DRIVER="AMD GPU"
                default_item=10
                main_menu
                break ;;
            7) GRAPHICS_DRIVER="mesa"
                default_item=10
                main_menu
                break ;;
            8) GRAPHICS_DRIVER=""
                default_item=10
                main_menu
                break ;;
        esac
        ;;
    1) main_menu
        break;;
    3) gpu_explain
        break;;
esac
    done
}

gpu_explain() {
    GPU_MESSAGE="\nBelow is a table explaining what drivers work for what GPUs:"
    GPU_MESSAGE+="\n\n${BOLD}==Type=====Driver===============GPU=================Backend============${BOLD_END}"
    GPU_MESSAGE+="\n| nvidia   ${GREEN}Proprietary${ENDSTYLE}          (10 series +)       ${CYAN}nvidia-utils${ENDSTYLE}      |"
    GPU_MESSAGE+="\n| nvidia   ${GREEN}OpenKernel${ENDSTYLE}           (16 series +)       ${CYAN}nvidia-utils${ENDSTYLE}      |"
    GPU_MESSAGE+="\n| nvidia   ${GREEN}vulkan-nouveau${ENDSTYLE}       (16 series +)       ${CYAN}mesa${ENDSTYLE}              |"
    GPU_MESSAGE+="\n| nvidia   ${GREEN}xf86-video-nouveau${ENDSTYLE}   (All*       )       ${CYAN}mesa${ENDSTYLE}              |"
    GPU_MESSAGE+="\n| intel    ${GREEN}xf86-video-intel${ENDSTYLE}     (Intel iGPU )       ${CYAN}mesa${ENDSTYLE}              |"
    GPU_MESSAGE+="\n| amd      ${GREEN}xf86-video-amdgpu${ENDSTYLE}    (AMD GPUs   )       ${CYAN}mesa${ENDSTYLE}              |"
    GPU_MESSAGE+="\n| mesa     *misc*               *ALL*               *is the backend*  |"
    GPU_MESSAGE+="\n${BOLD}=======================================================================${BOLD_END}"
    dialog --clear \
    --backtitle "$BACKTITLE" \
    --title "GPU Driver Table" \
    --colors \
    --cr-wrap \
    --msgbox "$GPU_MESSAGE" 0 0
    if [[ $? = 0 ]]; then
        graphics_drivers
    fi
}

aur_wrapper() {
    while true; do
    aurwrapperOptions=(
    1 "Yay (Written in Go)"
    2 "Paru (Written in Rust)"
    3 "None"
)
result=$(dialog --clear --title "Aur Wrapper" \
    --backtitle "$BACKTITLE" \
    --colors \
    --cancel-label "BACK" \
    --stdout \
    --menu "\nAn AUR Wrapper (or Helper) is a tool that automates installing dependencies and packages from the Arch User Repository." 0 0 3 "${aurwrapperOptions[@]}")

case $? in
    0)  case $result in
            1) AUR_WRAPPER="yay"
                default_item=11
                main_menu
                break ;;
            2) AUR_WRAPPER="paru"
                default_item=11
                main_menu
                break ;;
            3) AUR_WRAPPER="none"
                default_item=11
                main_menu
                break ;;
        esac
        ;;
    1) main_menu;;
esac
    done
}

_install_check() {
    if [[ -z "$HOSTNAME" || -z "$DEVICE" || -z "$FILE_SYSTEM" || "$root_pass_set" == "false" || -z "$TEXT_EDITOR" ]]; then
        prompt_argument=4
        ERROR=1
        main_menu
    else
        install_confirmation
    fi
}

install_confirmation() {
    if dialog --clear \
    --backtitle "${BACKTITLE}" \
    --colors \
    --title "Final Install Confirmation" \
    --yes-label "YES, I AM SURE" \
    --no-label "NO, TAKE ME BACK" \
    --yesno "\nAre you sure you would like to continue with the Install?
    \n\n${RED}${UNDERLINE}This will completely erase all data on ${BOLD}$DEVICE${ENDSTYLE}" 0 0 ; then
        # install && SUCCESSFUL_FINISH
        print_to_screen
    else
        prompt_argument=5
        main_menu
    fi
}

SUCCESSFUL_FINISH() {
    if dialog --clear \
    --backtitle "${BACKTITLE}" \
    --colors \
    --title "Installation Successful!" \
    --yesno "\nWould you like to chroot into the new system?" 0 0;
    then
        echo "arch-chroot /mnt"
    else
        prompt_argument=6
        main_menu
    fi
}

# Run-time flag functions
info_page() {
    dialog --clear \
    --backtitle "${BACKTITLE}" \
    --colors \
    --title "Info" \
    --msgbox "Riley's Arch Installer is a Dialog Menu-based Arch Installation Script \
    \n\nIt is completely written in Bash and uses the GNU Core Utils to create an Arch Linux System \
    \n\n${BOLD}License: ${ENDSTYLE} GPL 3.0 \
    \n${BOLD}Created by: ${ENDSTYLE} Riley Ava" 0 0
}

github() {
    clear
    prompt="Follow the project on Github:"
    prompt+="\nhttps://github.com/RileyMeta/Rarch_Installer"
    echo -e "$prompt"
}

help_menu() {
    clear
    prompt="Riley's Arch Installer\n"
    prompt+="\nLaunch Options: "
    prompt+="\n'--force' used to bypass the 2GiB Ram Limitation"
    prompt+="\n'--info' open the Dialog page for application info"
    prompt+="\n'--github' get a link to the github repo"
    prompt+="\n'--help' opens this menu, duh"
    echo -e "$prompt"
}

# Check for runtime flags
if [[ "$1" == "--force" ]]; then
    init_test true
elif [[ "$1" == "--info" ]]; then
    info_page
elif [[ "$1" == "--github" ]]; then
    github
elif [[ "$1" == "--help" ]]; then
    help_menu
else
    init_test false
fi
